// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  name           String
  phone          String?
  location       String?
  role           Role      @default(customer)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]   @relation("CustomerOrders")
  deliveries     Order[]   @relation("DeliveryPersonOrders")
  earnings       Earning[]
}

enum Role {
  customer
  worker
}

model Restaurant {
  id          String     @id @default(cuid())
  name        String
  location    String
  description String?
  imageUrl    String?
  menu        MenuItem[]
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String
  price        Float
  imageUrl     String?
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Order {
  id                    String      @id @default(cuid())
  user                  User        @relation("CustomerOrders", fields: [userId], references: [id])
  userId                String
  restaurant            Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId          String
  orderItems            OrderItem[]
  status                OrderStatus
  total                 Float
  deliveryLocation      String
  deliveryPerson        User?       @relation("DeliveryPersonOrders", fields: [deliveryPersonId], references: [id])
  deliveryPersonId      String?
  estimatedDeliveryTime String?
  feedback              Feedback?
  earning               Earning?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  price      Float
}

enum OrderStatus {
  pending
  accepted
  picked_up
  on_the_way
  delivered
  cancelled
}

model Feedback {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Earning {
  id               String        @id @default(cuid())
  deliveryPerson   User          @relation(fields: [deliveryPersonId], references: [id])
  deliveryPersonId String
  order            Order         @relation(fields: [orderId], references: [id])
  orderId          String        @unique
  amount           Float
  status           EarningStatus
  createdAt        DateTime      @default(now())
}

enum EarningStatus {
  pending
  completed
}
